package de.tum.in.SentimentAnalysis;

import java.io.OutputStream;
import java.io.PrintWriter;
import java.io.Serializable;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.Map;
import java.util.Vector;

import org.tartarus.PorterStemmer;


public class WordStemFeatures implements FeatureTemplate, Serializable {

	private class StemData implements Serializable
	{
		public int featureIdx;
		public int frequency;
		public int frequencyRank;

		public StemData(int featureIdx)
		{
			this.featureIdx = featureIdx;
			this.frequency = 1;
			this.frequencyRank = 0;
		}
	}

	private class CompareFrequency
		implements Comparator<Map.Entry<String, StemData>>
	{
		public int compare(Map.Entry<String, StemData> e1,
			Map.Entry<String, StemData> e2)
		{
			return e2.getValue().frequency - e1.getValue().frequency;
		}
	}


	private HashMap<String, StemData> stemMap;
	private Vector<String> featureNames;
	private int freqThreshold;
	private int minFreqRank;

	public WordStemFeatures(int freqThreshold, int minFreqRank)
	{
		stemMap = new HashMap<String, StemData>();
		featureNames = new Vector<String>();
		this.freqThreshold = freqThreshold;
		this.minFreqRank = minFreqRank;
	}

	public String getFeatureName(int idx)
	{
		return featureNames.get(idx);
	}

	public String[] getFeatureNames()
	{
		return featureNames.toArray(new String[featureNames.size()]);
	}

	public int getNumFeatures()
	{
		return featureNames.size();
	}

	public void reset()
	{
		stemMap.clear();
		featureNames.clear();
	}

	public void train(Corpus corpus)
	{
		for (Sentence s : corpus)
			for (Word w : s)
			{
				String word = w.getWord().toLowerCase();
				word = getStemForm(word);
				StemData data = stemMap.get(word);
				if (data == null)
				{
					stemMap.put(word, new StemData(featureNames.size()));
					featureNames.add("STM_" + word);
				}
				else
					data.frequency++;
			}

		// Rank word stems by their frequency: the lowest rank is assigned to
		// the most frequent stem.
		Vector<Map.Entry<String, StemData>> entries =
			new Vector<Map.Entry<String, StemData>>(stemMap.entrySet());
		Collections.sort(entries, new CompareFrequency());
		for (int i = 0; i < entries.size(); i++)
			entries.get(i).getValue().frequencyRank = i;
	}

	public int getFeaturesForWord(Sentence s, int pos, Vector<Integer> indices,
			Vector<Double> values)
	{
		String word = s.get(pos).getWord().toLowerCase();
		word = getStemForm(word);
		StemData data = stemMap.get(word);
		if ((data != null) &&
			(data.frequency > freqThreshold) &&
			(data.frequencyRank >= minFreqRank))
		{
			indices.add(data.featureIdx);
			values.add(1.0);
			return 1;
		}
		return 0;
	}

	public static String getStemForm(String word)
	{
		PorterStemmer stemmer = new PorterStemmer();
		stemmer.add(word.toCharArray(), word.length());
		stemmer.stem();
		return stemmer.toString();
	}

	public void printConfiguration(OutputStream out)
	{
		PrintWriter writer = new PrintWriter(out);
		writer.printf("word stem generated by Porter Stemmer algorithm, " +
				"frequency threshold = %d, minimum rank = %d\n",
				freqThreshold, minFreqRank);
		writer.flush();
	}

}
