package de.tum.in.SocialNetworks;

import java.io.File;

import de.tum.in.EMail.Message;
import de.tum.in.SentimentAnalysis.Corpus;
import de.tum.in.SentimentAnalysis.TextPolarityClassifier;


public class MessagePreprocessor {

	private static final char[] separators = {'-', '_'};

	// model files generated by SentimentAnalysis.TextPolarityClassifier
	private static final String[] paramFiles = {
		"./model/features.param",
		"./model/model.param",
		"./model/subj.features.param",
		"./model/subj.model.param"
	};

	private boolean stripQuotedContent;
	private boolean stripSignatures;
	private TextPolarityClassifier classifier;

	public MessagePreprocessor(boolean stripQuotedContent,
			boolean stripSignatures)
	{
		this.stripQuotedContent = stripQuotedContent;
		this.stripSignatures = stripSignatures;

		classifier = new TextPolarityClassifier(
				new File(paramFiles[0]), new File(paramFiles[1]),
				new File(paramFiles[2]), new File(paramFiles[3]));
	}

	public ProcessedMessage process(Message msg)
	{
		String processedBody = processBody(msg.getBody());
		// tokenize body and perform sentiment polarity classification
		Corpus annotatedBody = classifier.processText(processedBody, false);
		return new ProcessedMessage(msg, annotatedBody);
	}

	private String processBody(String body)
	{
		StringBuffer out = new StringBuffer();

		int lineStart = 0;
		boolean ignoreRest = false;
		while ((lineStart < body.length()) && !ignoreRest)
		{
			int lineEnd = body.indexOf('\n', lineStart);
			if (lineEnd < 0)
				lineEnd = body.length() - 1;
			boolean ignoreLine = false;

			char firstChar = body.charAt(lineStart);
			if (stripQuotedContent && (firstChar == '>'))
				ignoreLine = true;
			else if (stripSignatures)
			{
				for (char s : separators)
					if (firstChar == s)
					{
						int pos = lineStart + 1;
						while ((pos < lineEnd) &&
							   (body.charAt(pos) == firstChar))
							pos++;
						if ((pos == lineEnd) && ((lineEnd - lineStart) > 2))
							ignoreRest = true;
						break;
					}
			}

			if (!ignoreLine && !ignoreRest)
				out.append(body.substring(lineStart, lineEnd + 1));
			lineStart = lineEnd + 1;
		}

		return out.toString();
	}

}
